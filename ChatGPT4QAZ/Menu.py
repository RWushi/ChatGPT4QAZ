from aiogram import types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from Config import dp, bot, UserState, add_new_user
from Keyboards import menu_kb

async def menu(chat_id):
    await bot.send_message(chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=menu_kb)

@dp.message_handler(commands=['start'], state="*")
async def start(message: types.Message):
    await add_new_user(message.chat.id)
    await UserState.menu.set()
    await menu(message.chat.id)

#–ò–∑ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–µ—á–∞—Ç–∞
@dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚Ü©Ô∏è", state=UserState.prechat)
async def prechat_finish(message: types.Message):
    await bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await UserState.menu.set()
    await menu(message.chat.id)

#–ò–∑ —Ä–∞–∑–¥–µ–ª–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
@dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚Ü©Ô∏è", state=UserState.customization)
async def customization_finish(message: types.Message):
    await bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await UserState.menu.set()
    await menu(message.chat.id)

#–ò–∑ —Ä–∞–∑–¥–µ–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚Ü©Ô∏è", state=UserState.about)
async def about_finish(message: types.Message):
    await bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await UserState.menu.set()
    await menu(message.chat.id)

#–ò–∑ —Ä–∞–∑–¥–µ–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
@dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é‚Ü©Ô∏è", state=UserState.usage)
async def usage_finish(message: types.Message):
    await bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await UserState.menu.set()
    await menu(message.chat.id)

from PreChat import prechat
from Customization import customization
from About import about
from Usage import usage

@dp.message_handler(lambda message: message.text == "–ß–∞—Ç —Å GPT-4ü§ñ", state=UserState.menu)
async def chat_start(message: types.Message):
    await bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await UserState.prechat.set()
    await prechat(message.chat.id)

@dp.message_handler(lambda message: message.text == "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—èüé®", state=UserState.menu)
async def customization_start(message: types.Message):
    await bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await UserState.customization.set()
    await customization(message.chat.id)

@dp.message_handler(lambda message: message.text == "–û –±–æ—Ç–µüì±", state=UserState.menu)
async def about_start(message: types.Message):
    await bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await UserState.about.set()
    await about(message.chat.id)

@dp.message_handler(lambda message: message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µüñ•", state=UserState.menu)
async def usage_start(message: types.Message):
    await bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await UserState.usage.set()
    await usage(message.chat.id)

@dp.message_handler(lambda message: message.text == "üîÆ–°–¥–µ–ª–∞–Ω–æ RToolsüîÆ", state=UserState.menu)
async def rtools_start(message: types.Message):
    button = InlineKeyboardButton("üîÆ–°–≤—è–∑–∞—Ç—å—Å—èüîÆ", url="https://t.me/wuxieten")
    await bot.send_message(
        message.chat.id,
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –æ—á–µ–Ω—å —Ç–æ—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏. –°–º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å —Å–∞–π—Ç, –∞–Ω–∏–º–∞—Ü–∏—é, –±–æ—Ç–∞ –∏ –ø—Ä–æ—á–µ–µ –Ω–∞ –∑–∞–∫–∞–∑",
        reply_markup=InlineKeyboardMarkup().add(button)
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
